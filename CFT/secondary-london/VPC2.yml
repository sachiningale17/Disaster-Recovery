Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
# passing VPCCIDR block
  Vpc2CIDR:
    Description: Enter the IP range for ohio VPC
    Type: String
    Default: 10.0.0.0/16
# dividing it in subnets CIDR blocks
  VPC2PublicSubnet1CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/18

  VPC2PublicSubnet2CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.64.0/18

  VPC2PrivateSubnet1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.128.0/18
  VPC2PrivateSubnet2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.192.0/18

  # multi AZ parameter
  MultiAZ:
    Description: Multi-AZ replica database
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
    ConstraintDescription: must be true or false.

Conditions:
  Is-EC2-VPC:
    Fn::Or:
    - Fn::Equals:
      - Ref: AWS::Region
      - eu-west-2
    - Fn::Equals:
      - Ref: AWS::Region
      - us-east-2
  Is-EC2-Classic:
    Fn::Not:
    - Condition: Is-EC2-VPC
# creating all VPC resources
Resources:
  
  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc2CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway2:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway2
      VpcId: !Ref VPC2

  VPC2PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref VPC2PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  VPC2PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref VPC2PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  VPC2PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref VPC2PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  VPC2PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref VPC2PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  VPC2NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment2
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VPC2NatGateway2EIP.AllocationId
      SubnetId: !Ref VPC2PublicSubnet1

  VPC2PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  VPC2DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment2
    Properties:
      RouteTableId: !Ref VPC2PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway2

  VPC2PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2PublicRouteTable
      SubnetId: !Ref VPC2PublicSubnet1

  VPC2PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2PublicRouteTable
      SubnetId: !Ref VPC2PublicSubnet2

  VPC2PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  VPC2DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC2PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  VPC2PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2PrivateRouteTable
      SubnetId: !Ref VPC2PrivateSubnet1

  VPC2PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2PrivateRouteTable
      SubnetId: !Ref VPC2PrivateSubnet2

  dbSubnets:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: db-subnet-group
      SubnetIds: [ !Ref VPC2PrivateSubnet1, !Ref VPC2PrivateSubnet2 ]
      Tags:
        - Key: Name
          Value: DBSubnetGroup
    DependsOn: VPC2

  # our EC2 security group
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: Is-EC2-VPC
    Properties:
      VpcId:
        Ref: VPC2
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 0.0.0.0/0
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Condition: Is-EC2-Classic
    Properties:
      GroupDescription: database access
      DBSecurityGroupIngress:
        EC2SecurityGroupName:
          Ref: DBEC2SecurityGroup
# only creating ReadReplica in london Region for cross-region ReadReplication
  myReplicaDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: "read-replica"
      PubliclyAccessible: 'true'
      MultiAZ:
        Ref: MultiAZ
      DBSubnetGroupName: 
        Ref: dbSubnets
      # important- pointing at the Master DB
      SourceDBInstanceIdentifier: "arn:aws:rds:us-east-2:250738637992:db:vpc-rds-ohio-primary-masterdb-ylr6vcd73bj9"
      StorageType: gp2
      VPCSecurityGroups:
        Fn::If:
        - Is-EC2-VPC
        - - Fn::GetAtt:
            - DBEC2SecurityGroup
            - GroupId
        - Ref: AWS::NoValue
      DBSecurityGroups:
        Fn::If:
        - Is-EC2-Classic
        - - Ref: DBSecurityGroup
        - Ref: AWS::NoValue
    DeletionPolicy: Snapshot
    DependsOn: dbSubnets


Outputs:

  VPC2:
    Description: A reference to the created VPC
    Value: !Ref VPC2

  VPC2PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref VPC2PublicSubnet1, !Ref VPC2PublicSubnet2 ]]

  VPC2PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref VPC2PrivateSubnet1, !Ref VPC2PrivateSubnet2 ]]

  VPC2PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref VPC2PublicSubnet1

  VPC2PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref VPC2PublicSubnet2

  VPC2PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref VPC2PrivateSubnet1

  VPC2PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref VPC2PrivateSubnet2
